<?php

/* Some info. Scanner-vX.php - scans files for malware signatures.

V5 20240113 Tidy up and debug info

V4 20240113

### Modifications:

1. **New Parameter for Modified Date:** The function `scanDirectory` now includes 
  an optional parameter `$modifiedSince`. This parameter can be passed a 
  date string (like '2021-01-01'). 
  
  If this parameter is not provided or is empty, the function will scan all files.

2. **Timestamp Comparison:** Inside the function, the provided date is converted 
  to a Unix timestamp. The script then compares the last modified time 
  of each file (also as a Unix timestamp)
  
Only files found with a last modified date => than this modified date will be shown.
  
Example parameters:

$directoryToScan = '.'; // Current directory
$fileTypes = ['txt', 'php', 'css', 'js']; // File types
$searchStrings = ['malwareSignature1', 'malwareSignature2']; // Search strings
$modifiedSince = '2024-01-12 15:30:00'; // Example full date and time

Important Notes:

Make sure that the modifiedSince string is formatted correctly and matches the format 
expected by the strtotime() function in PHP. 
Common formats like "YYYY-MM-DD HH:MM:SS" should work well.

Time Zones: Verify that there's no time zone conflict. 
Ensure that the server's time zone and the time zone assumed in your $modifiedSince 
string are aligned. If needed, use date_default_timezone_set() to set the correct 
time zone in your script.

Time Zone Awareness: 

Be aware of time zones when dealing with times. The time interpreted by strtotime() 
  will be based on the time zone setting of your PHP environment.

Date and Time Format: 

Ensure that the date and time format you provide is compatible with strtotime(). 
	The format "YYYY-MM-DD HH:MM:SS" is widely used and recommended for clarity and compatibility.

Server Time Settings: 

The file modification times are typically based on the server's clock. 
  Make sure the server time is correctly set and synchronized.

*/

// V5 some tidying up and debugging stuff - seems to work and be effective now :)
// V4 includes the ability to only scan files after and including a specified date.
// V3 includes the date and time the file was last modified
// V2 reads file line by line to get hold of the line number of the string found
// V1 reads the whole file in one go (perhaps faster).

// Scanner Vx
// Scans folder and folders below current for "malware potential signatures" (see array)
// Returns (1) folders and files scanned (on screen) as they are scanned
//         (2) table of found signatures with lots info in cols (on screen)
//         (3) same columns as (2) as a CSV file: scan_results.csv in same folder to download
// Single file utility - upload into base folder and run e.g. domain.com/scanner-vx.php

$directoryToScan = '.'; // Current directory
$fileTypes = ['txt', 'php', 'css', 'js']; // Specify file types to scan
$modifiedSince = '2024-01-05 23:00:00'; // Example full date and time
$searchStrings = [
'base64_encode(', 
'base64_decode(', 
'eval(', 
'gzinflate(',
'gzdeflate(',
'str_rot13(',
'gzuncompress(',
'gzcompress(',
'exec(',
'system(',
'shell_exec(',
'assert(',
'create_function(',
'unpack(',
'ob_start(',
'ob_get_contents(',
'ob_end_clean(',
'file_get_contents(',
'file_put_contents(',
'curl_exec(',
'serialize(',
'unserialize('
]; // Predefined malware strings

displayIntro();

$results = scanDirectory($directoryToScan, $fileTypes, $searchStrings, $modifiedSince);

$outputFilename = 'scan_results.csv'; // CSV file name for output
outputToScreenAndCSV($results, $outputFilename);

displayCompletion();

function displayIntro() {
    echo "<h1>PHP Malware Scanner</h1>";
    echo "<p>This utility scans files for predefined malware strings.</p>";
    echo "<p>Version: 5.0.0</p>";
    echo "<p>Please wait, scanning...</p>";
}

function displayCompletion() {
    echo "<p>Scanning completed.</p>";
}

function scanDirectory($directory, $fileTypes, $searchStrings, $modifiedSince = '') {
    $results = [];
    $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directory));
    
    // Convert input date to Unix timestamp
    $modifiedSinceTimestamp = $modifiedSince ? strtotime($modifiedSince) : false;

    foreach ($files as $file) {
        if ($file->isDir()) continue;
		
		$fileModTime = filemtime($file);
		
        // Skip files modified before the specified date
        if ($modifiedSinceTimestamp && $fileModTime < $modifiedSinceTimestamp) {
            continue;
        }

		// Debugging output
        //echo "File: " . $file . " - Last Modified: " . date('Y-m-d H:i:s', $fileModTime) . "<br>";
		//echo "File: " . $file->getPathname() . " - Modified: " . date('Y-m-d H:i:s', $fileModTime) . "<br>";

        if (in_array(strtolower(pathinfo($file, PATHINFO_EXTENSION)), $fileTypes)) {
            $lines = file($file); // Read the file into an array of lines

            foreach ($lines as $lineNumber => $lineContent) {
                foreach ($searchStrings as $string) {
                    if (strpos($lineContent, $string) !== false) {
                        $results[] = [
                            'date_time' => date('Y-m-d H:i:s'),
                            'last_modified' => date('Y-m-d H:i:s', filemtime($file)),
                            'folder' => dirname($file),
                            'filename' => basename($file),
                            'string' => $string,
                            'line_number' => $lineNumber + 1, // Adding 1 for human-readable line number
                            'line_content' => substr(trim($lineContent), 0, 100)
                        ];
                    }
                }
            }
        }
    }

    if ($fileCount > 0) {
        echo "Scanned directory: " . $currentDirectory . " with " . $fileCount . " files.<br>";
    }

    return $results;
}

function outputToScreenAndCSV($results, $csvFilename) {
    $output = fopen($csvFilename, 'a');

    // Headers for CSV and screen
    $headers = ['Date and Time', 'Last Modified', 'Folder', 'Filename', 'String', 'Line Number', 'Line Content'];
    fputcsv($output, $headers);
    echo "<table border='1'><tr><th>" . implode('</th><th>', $headers) . "</th></tr>";

    foreach ($results as $result) {
        fputcsv($output, $result);
        echo "<tr><td>" . implode('</td><td>', $result) . "</td></tr>";
    }

    echo "</table>";
    fclose($output);
}

?>
